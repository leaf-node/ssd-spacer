// This code is licensensed under:
//
// Creative Commons' CC0 (public domain)
//
// https://creativecommons.org/publicdomain/zero/1.0/
//
// Created by Andrew Engelbrecht 2016
//
// ssd-spacer.escad is an ImplicitCAD/OpenSCAD description
// of a spacer to place between an SSD and the other side
// of a server's 3.5" hard drive caddy.
//

height = 1;
width = 2.5;
length = 7;
wallwidth = 0.25;
floorheight = 0.15;
wallcurveradius = height - floorheight;

// this also makes room for screw heads and washers:
screwdriverradius = 0.5;


ssdscrewheight = 0.6;
ssdscrewdistance1 = 1;
ssdscrewdistance2 = 6.5;
ssdscrewradius = 0.1;

hdscrewheight = 0.6;
hdscrewdistance1 = 2;
hdscrewdistance2 = 5;
hdscrewradius = 0.15;


big = 100; // arbitrarily big number


module screwHole (radius, x, y, z, angle) {

    translate (x, y, z) {
        rotate ([0,angle,0]) {
            linear_extrude (big) {
                circle (radius);
            }
        }
    }
}

// creates space for screw head and washer,
// can be used for screwdriver access
module washerSpace (radius, x, y, z, length, angle) {
    translate (x, y, z) {
        rotate ([90, angle, 0]) {
            linear_extrude (length) {
                union () {
                    circle (radius);
                    translate (-radius) {
                        square (radius * 2, big);
                    }
                }
            }
        }
    }
}

module main () {
    difference () {

        // outer shape: a box
        linear_extrude (height = height) {
            square (width, length);
        }

        // cut away center leaving curves along walls
        translate (wallwidth - big / 2, wallwidth - big / 2, floorheight) {
            intersection () {

                translate (big / 2, 0, 0) {
                    linear_extrude (height = big, r = wallcurveradius) {
                        square (big, big);
                    }
                }

                translate (0, big / 2, 0) {
                    linear_extrude (height = big, r = wallcurveradius) {
                        square (big, big);
                    }
                }

                translate (width - big / 2 - wallwidth * 2, 0, 0) {
                    linear_extrude (height = big, r = wallcurveradius) {
                        square (big, big);
                    }
                }

                translate (0, length - big / 2 - wallwidth * 2, 0) {
                    linear_extrude (height = big, r = wallcurveradius) {
                        square (big, big);
                    }
                }
            }
        }

        // cut out center of floor
        translate (1,1,-0.5) linear_extrude (height = height * 2) {
            square (width - 2 * (wallwidth + wallcurveradius) , length - 2 * (wallwidth + wallcurveradius));
        }

        // ssd screw hole and and access
        union () {

            screwHole (ssdscrewradius, wallwidth * 2, ssdscrewdistance1, ssdscrewheight, 270);
            washerSpace (screwdriverradius, wallwidth, ssdscrewdistance1, floorheight + screwdriverradius, big, 90);

        }

        // hd screw hole and and washer space
        union () {

            screwHole (hdscrewradius, width - wallwidth * 2, hdscrewdistance1, hdscrewheight, 90);
            washerSpace (screwdriverradius, width - wallwidth, hdscrewdistance1, floorheight + screwdriverradius, width / 2, 270);

        }

    }
}


main();

