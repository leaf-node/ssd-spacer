// This code is licensensed under:
//
// Creative Commons CC0 (public domain)
//
// https://creativecommons.org/publicdomain/zero/1.0/
//
// Created by Andrew Engelbrecht 2016
//
// ssd-spacer.escad is an ImplicitCAD/OpenSCAD description
// of a spacer to place between an SSD and the other side
// of a server's 3.5" hard drive caddy.
//
// The described object is only a prototype. Measurements
// must be made and added to this file before it is
// practically useful.
//
// to generate an .stl file:
// $ extopenscad ssd-spacer.escad
//


height = 1.3;
width = 10.16 - 6.985;
length = 9.9;
wallWidth = 0.25;
floorHeight = 0.1;
wallCurveRadius = height - floorHeight;

// this also makes room for screw heads and washers:
screwdriverRadius = 0.4;


ssdScrewHeight = 0.3;
ssdScrewDistance1 = 1.9;
ssdScrewDistance2 = 9.0;
ssdScrewRadius = 0.1; // smaller for grip

hdScrewHeight = 0.635;
hdScrewDistance1 = 2.850;
hdScrewDistance2 = 7.0;
hdScrewRadius = 0.1; // smaller for grip


big = 100; // arbitrarily big number


module screwHole (radius, x, y, z, angle) {

    translate (x, y, z) {
        rotate ([0,angle,0]) {
            linear_extrude (big) {
                circle (radius);
            }
        }
    }
}

// creates space for screw head and washer,
// can be used for screwdriver access
module washerSpace (radius, x, y, z, length, angle) {

    translate (x, y, z) {
        rotate ([90, angle, 0]) {
            linear_extrude (length) {
                union () {
                    circle (radius);
                    translate (-radius) {
                        square (radius * 2, big);
                    }
                }
            }
        }
    }
}

module main () {
    difference () {

        // outer shape: a box
        linear_extrude (height) {
            square (width, length);
        }

        // cut away center leaving curves along walls
        translate (wallWidth - big / 2, wallWidth - big / 2, floorHeight) {
            intersection () {

                translate (big / 2, 0, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (0, big / 2, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (width - big / 2 - wallWidth * 2, 0, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (0, length - big / 2 - wallWidth * 2, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }
            }
        }

        // cut out center of floor
        translate (wallWidth + wallCurveRadius, wallWidth + wallCurveRadius, -big / 2) {
            linear_extrude (big) {
                square (width - 2 * (wallWidth + wallCurveRadius) , length - 2 * (wallWidth + wallCurveRadius));
            }
        }

        // ssd screw holes and and access
        union () {

            for (distance = [ssdScrewDistance1, ssdScrewDistance2]) {

                screwHole (ssdScrewRadius, wallWidth * 2, distance, ssdScrewHeight, 270);
                // room for screw head
                washerSpace (screwdriverRadius, wallWidth, distance, screwdriverRadius, width / 2 - wallWidth, 90);
                // room for screwdriver
                washerSpace (screwdriverRadius, width / 2, distance, screwdriverRadius + floorHeight, big, 90);
            }
        }

        // hd screw holes and and washer space
        union () {

            for (distance = [hdScrewDistance1, hdScrewDistance2]) {

                screwHole (hdScrewRadius, width - wallWidth * 2, distance, hdScrewHeight, 90);
                washerSpace (screwdriverRadius, width - wallWidth, distance, floorHeight + screwdriverRadius, width / 2 - wallWidth, 270);
            }
        }

    }
}


main();

