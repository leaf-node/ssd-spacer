// This code is licensensed under:
//
// Creative Commons CC0 (public domain)
//
// https://creativecommons.org/publicdomain/zero/1.0/
//
// Created by Andrew Engelbrecht 2016
//
// ssd-spacer.escad is an ImplicitCAD/OpenSCAD description
// of a spacer to place between an SSD and the other side
// of a server's 3.5" drive caddy.
//


height = 1.3;
width = 10.16 - 6.985;
length = 9.9;
wallWidth = 0.25;
floorHeight = 0.2;
wallCurveRadius = height - floorHeight;

// this also makes room for screw heads and washers:
screwdriverRadius = 0.4;


ssdScrewHeight = 0.3;
ssdScrewDistance1 = 1.9;
ssdScrewDistance2 = 9.0;
ssdScrewRadius = 0.175;

hdScrewHeight = 0.635;
hdScrewDistance1 = 2.850;
hdScrewDistance2 = 7.0;
hdScrewRadius = 0.1; // smaller for grip

sigmoidSteepness = -4.9;
sigmoidCenterOffset = width / 2 - wallWidth - 0.5;
sigmoidHeight = floorHeight;

big = 100; // arbitrarily big number


module screwHole (radius, x, y, z, angle) {

    translate (x, y, z) {
        rotate ([0,angle,0]) {
            linear_extrude (big) {
                circle (radius);
            }
        }
    }
}

// helper module for creating screw head, washer and/or screw driver access
module washerSpaceHelper (radius, x, y, z, length, angle, translateFunction) {

    translate (x, y, z) {
        rotate ([90, angle, 0]) {
            linear_extrude (length, translate (h) = translateFunction (h)) {
                union () {
                    circle (radius);
                    translate (-radius) {
                        square (radius * 2, big);
                    }
                }
            }
        }
    }
}

// creates space for screw head and washer,
// can be used for screwdriver access
module washerSpace (radius, x, y, z, length, angle) {

    function dontTranslate (h) = [0, 0];

    washerSpaceHelper(radius, x, y, z, length, angle, dontTranslate);
}

// creates curved screw head and screwdriver access space
module washerSpaceSigmoid (radius, x, y, z, length, angle) {

    function sigmoidFunc (h) = [0, sigmoidHeight / (1 + exp (sigmoidSteepness * (h - sigmoidCenterOffset)))];

    washerSpaceHelper(radius, x, y, z, length, angle, sigmoidFunc);
}


module main () {
    difference () {

        // outer shape: a box
        linear_extrude (height) {
            square (width, length);
        }

        // cut away center leaving curves along walls
        translate (wallWidth - big / 2, wallWidth - big / 2, floorHeight) {
            intersection () {

                translate (big / 2, 0, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (0, big / 2, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (width - big / 2 - wallWidth * 2, 0, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }

                translate (0, length - big / 2 - wallWidth * 2, 0) {
                    linear_extrude (height = big, r = wallCurveRadius) {
                        square (big, big);
                    }
                }
            }
        }

        // ssd screw holes and and access
        union () {

            for (distance = [ssdScrewDistance1, ssdScrewDistance2]) {

                screwHole (ssdScrewRadius, wallWidth * 2, distance, ssdScrewHeight, 270);
                // curved space for screw head and screw driver
                washerSpaceSigmoid (screwdriverRadius, wallWidth, distance, screwdriverRadius, width - wallWidth, 90);
            }
        }

        // hd screw holes and and washer space
        union () {

            for (distance = [hdScrewDistance1, hdScrewDistance2]) {

                screwHole (hdScrewRadius, width - wallWidth * 2, distance, hdScrewHeight, 90);
                washerSpace (screwdriverRadius, width - wallWidth, distance, hdScrewHeight, width / 2 - wallWidth, 270);
            }
        }

    }
}


main();

